{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\dclm-ipswich-website\\\\frontend\\\\src\\\\assets\\\\context\\\\EventContext.js\",\n  _s = $RefreshSig$();\n// src/context/EventContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport eventService from '../../services/eventService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EventContext = /*#__PURE__*/createContext();\nconst EventProvider = ({\n  children\n}) => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch events, can be called during component mount or retry\n  const fetchEvents = async () => {\n    setLoading(true); // Set loading state to true whenever fetching starts\n    setError(null); // Reset the error state before trying to fetch data\n    try {\n      const data = await eventService.getEvents(); // Call the service to get events\n      setEvents(data);\n      debugger;\n    } catch (err) {\n      console.error('Error fetching events:', err);\n      setError('Failed to load events. Please try again later.');\n    } finally {\n      setLoading(false); // Set loading to false when the fetching is complete\n    }\n  };\n\n  // Fetch events when the component mounts\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  // Return the fetched events, loading state, error state, and refresh function for retry\n  return /*#__PURE__*/_jsxDEV(EventContext.Provider, {\n    value: {\n      events,\n      loading,\n      error,\n      refresh: fetchEvents\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(EventProvider, \"TlsuwTtpJOZ2tMfhB3uipTGA4lI=\");\n_c = EventProvider;\nexport default EventProvider;\nvar _c;\n$RefreshReg$(_c, \"EventProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","eventService","jsxDEV","_jsxDEV","EventContext","EventProvider","children","_s","events","setEvents","loading","setLoading","error","setError","fetchEvents","data","getEvents","err","console","Provider","value","refresh","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/assets/context/EventContext.js"],"sourcesContent":["// src/context/EventContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport eventService from '../../services/eventService';\r\n\r\nexport const EventContext = createContext();\r\n\r\nconst EventProvider = ({ children }) => {\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Function to fetch events, can be called during component mount or retry\r\n  const fetchEvents = async () => {\r\n    setLoading(true); // Set loading state to true whenever fetching starts\r\n    setError(null);   // Reset the error state before trying to fetch data\r\n    try {\r\n      const data = await eventService.getEvents(); // Call the service to get events\r\n      setEvents(data);\r\n      debugger;\r\n    } catch (err) {\r\n      console.error('Error fetching events:', err);\r\n      setError('Failed to load events. Please try again later.');\r\n    } finally {\r\n      setLoading(false); // Set loading to false when the fetching is complete\r\n    }\r\n  };\r\n\r\n  // Fetch events when the component mounts\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  // Return the fetched events, loading state, error state, and refresh function for retry\r\n  return (\r\n    <EventContext.Provider value={{ events, loading, error, refresh: fetchEvents }}>\r\n      {children}\r\n    </EventContext.Provider>\r\n  );\r\n};\r\n\r\nexport default EventProvider;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,YAAY,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAE3C,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BH,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAG;IAClB,IAAI;MACF,MAAME,IAAI,GAAG,MAAMd,YAAY,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC;MAC7CP,SAAS,CAACM,IAAI,CAAC;MACf;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZC,OAAO,CAACN,KAAK,CAAC,wBAAwB,EAAEK,GAAG,CAAC;MAC5CJ,QAAQ,CAAC,gDAAgD,CAAC;IAC5D,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdc,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEX,OAAA,CAACC,YAAY,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,MAAM;MAAEE,OAAO;MAAEE,KAAK;MAAES,OAAO,EAAEP;IAAY,CAAE;IAAAR,QAAA,EAC5EA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAClB,EAAA,CAhCIF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAkCnB,eAAeA,aAAa;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}