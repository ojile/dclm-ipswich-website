{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\dclm-ipswich-website\\\\frontend\\\\src\\\\assets\\\\context\\\\SermonContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios'; // Using axios for better error handling\n\n// Create the Sermon Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SermonContext = /*#__PURE__*/createContext();\n\n// Create the Provider\nconst SermonProvider = ({\n  children\n}) => {\n  _s();\n  const [sermons, setSermons] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch sermons\n  const fetchSermons = async () => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n    try {\n      // Replace with actual API endpoint\n      const response = await axios.get('http://localhost:5000/sermons');\n      setSermons(response.data); // Assuming response.data is an array of sermons\n    } catch (error) {\n      // Improved error handling\n      if (error.response) {\n        // Server responded with a status other than 2xx\n        setError(`Error: ${error.response.status} - ${error.response.data}`);\n      } else if (error.request) {\n        // Request was made but no response received\n        setError('Error: No response from the server. Please try again later.');\n      } else {\n        // Something else caused an error\n        setError(`Error: ${error.message}`);\n      }\n    } finally {\n      setLoading(false); // Set loading to false once fetching is done\n    }\n  };\n\n  // Fetch sermons when the component mounts\n  useEffect(() => {\n    fetchSermons();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SermonContext.Provider, {\n    value: {\n      sermons,\n      loading,\n      error,\n      refresh: fetchSermons\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SermonProvider, \"CKRXNtUO84cSOPF/3yyfzMS/ie4=\");\n_c = SermonProvider;\nexport { SermonProvider, SermonContext };\nvar _c;\n$RefreshReg$(_c, \"SermonProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","SermonContext","SermonProvider","children","_s","sermons","setSermons","loading","setLoading","error","setError","fetchSermons","response","get","data","status","request","message","Provider","value","refresh","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/assets/context/SermonContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios'; // Using axios for better error handling\r\n\r\n// Create the Sermon Context\r\nconst SermonContext = createContext();\r\n\r\n// Create the Provider\r\nconst SermonProvider = ({ children }) => {\r\n  const [sermons, setSermons] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Function to fetch sermons\r\n  const fetchSermons = async () => {\r\n    setLoading(true);\r\n    setError(null); // Clear previous errors\r\n    try {\r\n      // Replace with actual API endpoint\r\n      const response = await axios.get('http://localhost:5000/sermons'); \r\n\r\n      setSermons(response.data); // Assuming response.data is an array of sermons\r\n    } catch (error) {\r\n      // Improved error handling\r\n      if (error.response) {\r\n        // Server responded with a status other than 2xx\r\n        setError(`Error: ${error.response.status} - ${error.response.data}`);\r\n      } else if (error.request) {\r\n        // Request was made but no response received\r\n        setError('Error: No response from the server. Please try again later.');\r\n      } else {\r\n        // Something else caused an error\r\n        setError(`Error: ${error.message}`);\r\n      }\r\n    } finally {\r\n      setLoading(false); // Set loading to false once fetching is done\r\n    }\r\n  };\r\n\r\n  // Fetch sermons when the component mounts\r\n  useEffect(() => {\r\n    fetchSermons();\r\n  }, []);\r\n\r\n  return (\r\n    <SermonContext.Provider value={{ sermons, loading, error, refresh: fetchSermons }}>\r\n      {children} {/* This allows children components to access the context */}\r\n    </SermonContext.Provider>\r\n  );\r\n};\r\n\r\nexport { SermonProvider, SermonContext };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;;AAErC;AACA,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChB,IAAI;MACF;MACA,MAAME,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,+BAA+B,CAAC;MAEjEP,UAAU,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd;MACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;QAClB;QACAF,QAAQ,CAAC,UAAUD,KAAK,CAACG,QAAQ,CAACG,MAAM,MAAMN,KAAK,CAACG,QAAQ,CAACE,IAAI,EAAE,CAAC;MACtE,CAAC,MAAM,IAAIL,KAAK,CAACO,OAAO,EAAE;QACxB;QACAN,QAAQ,CAAC,6DAA6D,CAAC;MACzE,CAAC,MAAM;QACL;QACAA,QAAQ,CAAC,UAAUD,KAAK,CAACQ,OAAO,EAAE,CAAC;MACrC;IACF,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdc,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,aAAa,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,OAAO;MAAEE,OAAO;MAAEE,KAAK;MAAEW,OAAO,EAAET;IAAa,CAAE;IAAAR,QAAA,GAC/EA,QAAQ,EAAC,GAAC;EAAA;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE7B,CAAC;AAACpB,EAAA,CAzCIF,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AA2CpB,SAASA,cAAc,EAAED,aAAa;AAAG,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}