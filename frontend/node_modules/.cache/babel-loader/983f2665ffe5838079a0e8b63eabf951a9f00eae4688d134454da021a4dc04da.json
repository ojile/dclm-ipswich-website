{"ast":null,"code":"import axios from 'axios';\nimport { apiUrl } from '../apiConfig'; // Import the API URL\n\n// Login function\nconst login = async (username, password) => {\n  try {\n    const response = await axios.post(`${apiUrl}/auth/login`, {\n      username,\n      password\n    }); // Updated the endpoint\n\n    // Assuming the JWT token is returned in response.data.token\n    const {\n      token\n    } = response.data;\n\n    // Store the token in localStorage or sessionStorage for later use\n    localStorage.setItem('token', token); // Save the token for future requests\n\n    return response.data; // Return user data on successful login\n  } catch (error) {\n    console.error('Login error:', error);\n    return null; // Return null if login fails\n  }\n};\n\n// Function to get the Authorization header with token\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token'); // Get the token from localStorage\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {}; // Return the Authorization header\n};\n\n// Example of a protected API call (createSermon function)\nconst createSermon = async sermonData => {\n  try {\n    const response = await axios.post(`${apiUrl}/sermons`, sermonData, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeader() // Add Authorization header to the request\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating sermon:', error);\n    return null; // Handle error appropriately\n  }\n};\n\n// Export the login and createSermon functions as named exports\nconst authService = {\n  login,\n  createSermon\n};\nexport default authService; // Default export","map":{"version":3,"names":["axios","apiUrl","login","username","password","response","post","token","data","localStorage","setItem","error","console","getAuthHeader","getItem","Authorization","createSermon","sermonData","headers","authService"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { apiUrl } from '../apiConfig'; // Import the API URL\r\n\r\n// Login function\r\nconst login = async (username, password) => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/auth/login`, { username, password }); // Updated the endpoint\r\n\r\n    // Assuming the JWT token is returned in response.data.token\r\n    const { token } = response.data;\r\n\r\n    // Store the token in localStorage or sessionStorage for later use\r\n    localStorage.setItem('token', token); // Save the token for future requests\r\n\r\n    return response.data; // Return user data on successful login\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return null; // Return null if login fails\r\n  }\r\n};\r\n\r\n// Function to get the Authorization header with token\r\nconst getAuthHeader = () => {\r\n  const token = localStorage.getItem('token'); // Get the token from localStorage\r\n  return token ? { Authorization: `Bearer ${token}` } : {}; // Return the Authorization header\r\n};\r\n\r\n// Example of a protected API call (createSermon function)\r\nconst createSermon = async (sermonData) => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/sermons`, sermonData, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getAuthHeader() // Add Authorization header to the request\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating sermon:', error);\r\n    return null; // Handle error appropriately\r\n  }\r\n};\r\n\r\n// Export the login and createSermon functions as named exports\r\nconst authService = {\r\n  login,\r\n  createSermon,\r\n};\r\n\r\nexport default authService; // Default export\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,cAAc,CAAC,CAAC;;AAEvC;AACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,MAAM,aAAa,EAAE;MAAEE,QAAQ;MAAEC;IAAS,CAAC,CAAC,CAAC,CAAC;;IAEnF;IACA,MAAM;MAAEG;IAAM,CAAC,GAAGF,QAAQ,CAACG,IAAI;;IAE/B;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC,CAAC,CAAC;;IAEtC,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,MAAME,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMN,KAAK,GAAGE,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,OAAOP,KAAK,GAAG;IAAEQ,aAAa,EAAE,UAAUR,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC;;AAED;AACA,MAAMS,YAAY,GAAG,MAAOC,UAAU,IAAK;EACzC,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,MAAM,UAAU,EAAEgB,UAAU,EAAE;MACjEC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGL,aAAa,CAAC,CAAC,CAAC;MACrB;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,MAAMQ,WAAW,GAAG;EAClBjB,KAAK;EACLc;AACF,CAAC;AAED,eAAeG,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}