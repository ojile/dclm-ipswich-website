{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\dclm-ipswich-website\\\\frontend\\\\src\\\\assets\\\\context\\\\SermonContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the Sermon Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SermonContext = /*#__PURE__*/createContext();\n\n// Create the Provider\nconst SermonProvider = ({\n  children\n}) => {\n  _s();\n  const [sermons, setSermons] = useState([]);\n  useEffect(() => {\n    // Fetch sermons data from an API or service\n    const fetchSermons = async () => {\n      try {\n        const response = await fetch('/api/sermons'); // Replace with actual API endpoint\n\n        // Check if the response is valid\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status} - ${response.statusText}`);\n        }\n\n        // Check if the content type is JSON\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.indexOf('application/json') !== -1) {\n          const data = await response.json();\n          setSermons(data);\n        } else {\n          throw new Error('Response is not valid JSON');\n        }\n      } catch (error) {\n        console.error('Error fetching sermons:', error);\n      }\n    };\n    fetchSermons();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SermonContext.Provider, {\n    value: {\n      sermons\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SermonProvider, \"ODpVikzG9l8fubPj4uXgt74fq8Y=\");\n_c = SermonProvider;\nexport { SermonProvider, SermonContext };\nvar _c;\n$RefreshReg$(_c, \"SermonProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","SermonContext","SermonProvider","children","_s","sermons","setSermons","fetchSermons","response","fetch","ok","Error","status","statusText","contentType","headers","get","indexOf","data","json","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/assets/context/SermonContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create the Sermon Context\r\nconst SermonContext = createContext();\r\n\r\n// Create the Provider\r\nconst SermonProvider = ({ children }) => {\r\n  const [sermons, setSermons] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch sermons data from an API or service\r\n    const fetchSermons = async () => {\r\n      try {\r\n        const response = await fetch('/api/sermons'); // Replace with actual API endpoint\r\n\r\n        // Check if the response is valid\r\n        if (!response.ok) {\r\n          throw new Error(`Error: ${response.status} - ${response.statusText}`);\r\n        }\r\n\r\n        // Check if the content type is JSON\r\n        const contentType = response.headers.get('content-type');\r\n        if (contentType && contentType.indexOf('application/json') !== -1) {\r\n          const data = await response.json();\r\n          setSermons(data);\r\n        } else {\r\n          throw new Error('Response is not valid JSON');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sermons:', error);\r\n      }\r\n    };\r\n\r\n    fetchSermons();\r\n  }, []);\r\n\r\n  return (\r\n    <SermonContext.Provider value={{ sermons }}>\r\n      {children} {/* This allows children components to access the context */}\r\n    </SermonContext.Provider>\r\n  );\r\n};\r\n\r\nexport { SermonProvider, SermonContext };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;;AAErC;AACA,MAAMM,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;;QAE9C;QACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,UAAUH,QAAQ,CAACI,MAAM,MAAMJ,QAAQ,CAACK,UAAU,EAAE,CAAC;QACvE;;QAEA;QACA,MAAMC,WAAW,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;UACjE,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;UAClCb,UAAU,CAACY,IAAI,CAAC;QAClB,CAAC,MAAM;UACL,MAAM,IAAIP,KAAK,CAAC,4BAA4B,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDb,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,aAAa,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB;IAAQ,CAAE;IAAAF,QAAA,GACxCA,QAAQ,EAAC,GAAC;EAAA;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE7B,CAAC;AAACvB,EAAA,CAnCIF,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AAqCpB,SAASA,cAAc,EAAED,aAAa;AAAG,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}