{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\dclm-ipswich-website\\\\frontend\\\\src\\\\assets\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState } from 'react';\nimport authService from '../../services/authService'; // Your authentication service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const login = async (username, password) => {\n    const userData = await authService.login(username, password);\n    if (userData) {\n      setUser(userData); // Set the user data in the context\n    } else {\n      throw new Error('Login failed'); // Handle login failure\n    }\n  };\n  const logout = () => {\n    setUser(null); // Clear user data on logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","login","username","password","userData","Error","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/assets/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState } from 'react';\r\nimport authService from '../../services/authService'; // Your authentication service\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = async (username, password) => {\r\n    const userData = await authService.login(username, password);\r\n    if (userData) {\r\n      setUser(userData); // Set the user data in the context\r\n    } else {\r\n      throw new Error('Login failed'); // Handle login failure\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null); // Clear user data on logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,WAAW,MAAM,4BAA4B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMU,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,MAAMC,QAAQ,GAAG,MAAMZ,WAAW,CAACS,KAAK,CAACC,QAAQ,EAAEC,QAAQ,CAAC;IAC5D,IAAIC,QAAQ,EAAE;MACZJ,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;IACnC;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBN,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,IAAI;MAAEE,KAAK;MAAEK;IAAO,CAAE;IAAAT,QAAA,EAClDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACd,EAAA,CArBWF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}