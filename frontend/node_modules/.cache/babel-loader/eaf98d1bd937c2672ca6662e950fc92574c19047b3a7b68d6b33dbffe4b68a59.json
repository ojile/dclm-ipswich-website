{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\dclm-ipswich-website\\\\frontend\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../assets/context/AuthContext'; // Assuming AuthContext is correctly set up\nimport { useNavigate } from 'react-router-dom'; // Use useNavigate instead of useHistory\nimport { apiUrl } from '../apiConfig'; // Import apiUrl\nimport '../assets/styles/components-css/login.css'; // Import CSS styles for the login page\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const {\n    login\n  } = useContext(AuthContext); // Use login function from AuthContext\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n  const [error, setError] = useState(''); // For success/error messages\n  const [successMessage, setSuccessMessage] = useState(''); // For success message\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials({\n      ...credentials,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(''); // Clear any previous error message\n    setSuccessMessage(''); // Clear previous success message\n\n    try {\n      // Use axios to make a POST request to the correct endpoint\n      const response = await axios.post(`${apiUrl}/auth/login`, credentials);\n\n      // Extract the token from the response\n      const {\n        token\n      } = response.data;\n\n      // Save the token to local storage or context\n      localStorage.setItem('token', token); // Store token in local storage\n      await login(credentials.username, credentials.password); // If your context manages login state\n\n      setError(''); // Clear error message on successful login\n      setSuccessMessage('Login successful!'); // Set success message\n      navigate('/home'); // Navigate to the home page\n    } catch (err) {\n      var _err$response, _err$response$data;\n      // Display error message\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Login failed. Please try again.');\n    } finally {\n      setIsLoading(false); // Stop loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), \"  \", successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 26\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          name: \"username\",\n          value: credentials.username,\n          onChange: handleChange,\n          required: true,\n          disabled: isLoading // Disable input during loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          value: credentials.password,\n          onChange: handleChange,\n          required: true,\n          disabled: isLoading // Disable input during loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"login-button\",\n        disabled: isLoading // Disable the button when loading\n        ,\n        children: [isLoading ? 'Logging in...' : 'Login', \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"J7HQmlp2xZR5WfLVmh/IGFgPhn4=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useContext","axios","AuthContext","useNavigate","apiUrl","jsxDEV","_jsxDEV","Login","_s","login","credentials","setCredentials","username","password","error","setError","successMessage","setSuccessMessage","isLoading","setIsLoading","navigate","handleChange","e","name","value","target","handleSubmit","preventDefault","response","post","token","data","localStorage","setItem","err","_err$response","_err$response$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/components/Login.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../assets/context/AuthContext'; // Assuming AuthContext is correctly set up\r\nimport { useNavigate } from 'react-router-dom'; // Use useNavigate instead of useHistory\r\nimport { apiUrl } from '../apiConfig'; // Import apiUrl\r\nimport '../assets/styles/components-css/login.css'; // Import CSS styles for the login page\r\n\r\nconst Login = () => {\r\n  const { login } = useContext(AuthContext); // Use login function from AuthContext\r\n  const [credentials, setCredentials] = useState({ username: '', password: '' });\r\n  const [error, setError] = useState('');  // For success/error messages\r\n  const [successMessage, setSuccessMessage] = useState(''); // For success message\r\n  const [isLoading, setIsLoading] = useState(false);  // Loading state\r\n  const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setCredentials({ ...credentials, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setError('');  // Clear any previous error message\r\n    setSuccessMessage(''); // Clear previous success message\r\n\r\n    try {\r\n      // Use axios to make a POST request to the correct endpoint\r\n      const response = await axios.post(`${apiUrl}/auth/login`, credentials);\r\n\r\n      // Extract the token from the response\r\n      const { token } = response.data;\r\n\r\n      // Save the token to local storage or context\r\n      localStorage.setItem('token', token);  // Store token in local storage\r\n      await login(credentials.username, credentials.password);  // If your context manages login state\r\n\r\n      setError('');  // Clear error message on successful login\r\n      setSuccessMessage('Login successful!'); // Set success message\r\n      navigate('/home'); // Navigate to the home page\r\n\r\n    } catch (err) {\r\n      // Display error message\r\n      setError(err.response?.data?.error || 'Login failed. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);  // Stop loading state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h1>Login</h1>\r\n      {error && <p className=\"error-message\">{error}</p>}  {/* Display error message if exists */}\r\n      {successMessage && <p className=\"success-message\">{successMessage}</p>} {/* Display success message if exists */}\r\n      <form onSubmit={handleSubmit} className=\"login-form\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            name=\"username\"\r\n            value={credentials.username}\r\n            onChange={handleChange}\r\n            required\r\n            disabled={isLoading}  // Disable input during loading\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            value={credentials.password}\r\n            onChange={handleChange}\r\n            required\r\n            disabled={isLoading}  // Disable input during loading\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"login-button\"\r\n          disabled={isLoading}  // Disable the button when loading\r\n        >\r\n          {isLoading ? 'Logging in...' : 'Login'}  {/* Update button text during loading */}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}