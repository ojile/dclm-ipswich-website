{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\dclm-ipswich-website\\\\frontend\\\\src\\\\assets\\\\context\\\\SermonContext.js\",\n  _s = $RefreshSig$();\n// SermonContext.js\nimport React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport axios from 'axios';\nimport { apiUrl } from '../../apiConfig'; // Ensure this URL points to your backend API\n\n// Create the Sermon Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SermonContext = /*#__PURE__*/createContext();\n\n// Create the Provider component\nconst SermonProvider = ({\n  children\n}) => {\n  _s();\n  const [sermons, setSermons] = useState([]);\n  const [loading, setLoading] = useState(true); // State to indicate loading\n  const [error, setError] = useState(''); // State to capture errors\n  const [noSermons, setNoSermons] = useState(false); // State to handle empty sermons\n\n  // Function to fetch sermons data from the backend\n  const fetchSermons = useCallback(async () => {\n    setLoading(true); // Start loading\n    setError(''); // Clear any previous errors\n    setNoSermons(false); // Reset noSermons state\n\n    try {\n      const response = await axios.get(`${apiUrl}/sermons`); // Fetch sermons from backend API\n\n      // Ensure response is OK\n      if (response.status !== 200) {\n        throw new Error(`Failed to fetch sermons: ${response.statusText}`);\n      }\n      if (response.data.length === 0) {\n        setNoSermons(true); // Set noSermons if the response data is empty\n      } else {\n        setSermons(response.data); // Set the sermons data\n      }\n    } catch (error) {\n      console.error('Error fetching sermons:', error);\n      setError('Error fetching sermons. Please try again.');\n    } finally {\n      setLoading(false); // End loading\n    }\n  }, []);\n\n  // Refresh function to refetch sermons, can be called externally\n  const refresh = useCallback(() => {\n    fetchSermons(); // Fetch sermons again\n  }, [fetchSermons]);\n\n  // useEffect to fetch sermons on mount\n  useEffect(() => {\n    fetchSermons(); // Fetch sermons when the component mounts\n  }, [fetchSermons]);\n\n  // Memoize context value to avoid unnecessary re-renders\n  const value = useMemo(() => ({\n    sermons,\n    loading,\n    error,\n    refresh,\n    noSermons\n  }), [sermons, loading, error, refresh, noSermons]);\n  return /*#__PURE__*/_jsxDEV(SermonContext.Provider, {\n    value: value,\n    children: [children, \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(SermonProvider, \"9jwPT5nqwnoHdOSW+29izeRE77E=\");\n_c = SermonProvider;\nexport { SermonProvider, SermonContext };\nvar _c;\n$RefreshReg$(_c, \"SermonProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useMemo","axios","apiUrl","jsxDEV","_jsxDEV","SermonContext","SermonProvider","children","_s","sermons","setSermons","loading","setLoading","error","setError","noSermons","setNoSermons","fetchSermons","response","get","status","Error","statusText","data","length","console","refresh","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/dclm-ipswich-website/frontend/src/assets/context/SermonContext.js"],"sourcesContent":["// SermonContext.js\r\nimport React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { apiUrl } from '../../apiConfig';  // Ensure this URL points to your backend API\r\n\r\n// Create the Sermon Context\r\nconst SermonContext = createContext();\r\n\r\n// Create the Provider component\r\nconst SermonProvider = ({ children }) => {\r\n  const [sermons, setSermons] = useState([]);\r\n  const [loading, setLoading] = useState(true);  // State to indicate loading\r\n  const [error, setError] = useState('');  // State to capture errors\r\n  const [noSermons, setNoSermons] = useState(false); // State to handle empty sermons\r\n\r\n  // Function to fetch sermons data from the backend\r\n  const fetchSermons = useCallback(async () => {\r\n    setLoading(true);  // Start loading\r\n    setError('');  // Clear any previous errors\r\n    setNoSermons(false); // Reset noSermons state\r\n\r\n    try {\r\n      const response = await axios.get(`${apiUrl}/sermons`);  // Fetch sermons from backend API\r\n\r\n      // Ensure response is OK\r\n      if (response.status !== 200) {\r\n        throw new Error(`Failed to fetch sermons: ${response.statusText}`);\r\n      }\r\n\r\n      if (response.data.length === 0) {\r\n        setNoSermons(true); // Set noSermons if the response data is empty\r\n      } else {\r\n        setSermons(response.data);  // Set the sermons data\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching sermons:', error);\r\n      setError('Error fetching sermons. Please try again.');\r\n    } finally {\r\n      setLoading(false);  // End loading\r\n    }\r\n  }, []);\r\n\r\n  // Refresh function to refetch sermons, can be called externally\r\n  const refresh = useCallback(() => {\r\n    fetchSermons();  // Fetch sermons again\r\n  }, [fetchSermons]);\r\n\r\n  // useEffect to fetch sermons on mount\r\n  useEffect(() => {\r\n    fetchSermons();  // Fetch sermons when the component mounts\r\n  }, [fetchSermons]);\r\n\r\n  // Memoize context value to avoid unnecessary re-renders\r\n  const value = useMemo(() => ({\r\n    sermons,\r\n    loading,\r\n    error,\r\n    refresh,\r\n    noSermons,\r\n  }), [sermons, loading, error, refresh, noSermons]);\r\n\r\n  return (\r\n    <SermonContext.Provider value={value}>\r\n      {children}  {/* This allows children components to access the context */}\r\n    </SermonContext.Provider>\r\n  );\r\n};\r\n\r\nexport { SermonProvider, SermonContext };\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AACvF,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,iBAAiB,CAAC,CAAE;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGT,aAAa,CAAC,CAAC;;AAErC;AACA,MAAMU,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACzC,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD;EACA,MAAMoB,YAAY,GAAGlB,WAAW,CAAC,YAAY;IAC3Ca,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;IACnBE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;IACfE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;IAErB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,GAAGjB,MAAM,UAAU,CAAC,CAAC,CAAE;;MAExD;MACA,IAAIgB,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,4BAA4BH,QAAQ,CAACI,UAAU,EAAE,CAAC;MACpE;MAEA,IAAIJ,QAAQ,CAACK,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QAC9BR,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACtB,CAAC,MAAM;QACLN,UAAU,CAACQ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAE;MAC9B;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,QAAQ,CAAC,2CAA2C,CAAC;IACvD,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMc,OAAO,GAAG3B,WAAW,CAAC,MAAM;IAChCkB,YAAY,CAAC,CAAC,CAAC,CAAE;EACnB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;EACAnB,SAAS,CAAC,MAAM;IACdmB,YAAY,CAAC,CAAC,CAAC,CAAE;EACnB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMU,KAAK,GAAG3B,OAAO,CAAC,OAAO;IAC3BS,OAAO;IACPE,OAAO;IACPE,KAAK;IACLa,OAAO;IACPX;EACF,CAAC,CAAC,EAAE,CAACN,OAAO,EAAEE,OAAO,EAAEE,KAAK,EAAEa,OAAO,EAAEX,SAAS,CAAC,CAAC;EAElD,oBACEX,OAAA,CAACC,aAAa,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,GAClCA,QAAQ,EAAC,IAAE;EAAA;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE7B,CAAC;AAACxB,EAAA,CAzDIF,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AA2DpB,SAASA,cAAc,EAAED,aAAa;AAAG,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}